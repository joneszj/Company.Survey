// <auto-generated />
using System;
using Company.Survey.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Company.Survey.Core.Migrations
{
    [DbContext(typeof(CoreContext))]
    [Migration("20200618001559_Heirarchical survey question")]
    partial class Heirarchicalsurveyquestion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.5.20278.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CompanyName = "Test Company",
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 246, DateTimeKind.Local).AddTicks(7437),
                            Email = "joneszj@gmail.com",
                            FirstName = "Zachary",
                            IsActive = true,
                            LastName = "Jones",
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 246, DateTimeKind.Local).AddTicks(7455),
                            Phone = "555-333-1111"
                        });
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.ClientSurveys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientSurveyKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SurveyId");

                    b.ToTable("ClientSurveys");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClientId = -1,
                            ClientSurveyKey = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(4819),
                            IsActive = true,
                            IsComplete = false,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(4832),
                            SurveyId = -1
                        });
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StepContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StepContentId");

                    b.ToTable("Content");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ContentData = "<img class=\"img-fluid\" src=\"/assets/images/databerrymigrationprocess.jpg\" alt=\"migration process\">",
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(7651),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(7663),
                            StepContentId = -1
                        });
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientSurveyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupIndex")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplyData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientSurveyId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("Reply");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClientSurveyId = -1,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(9495),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(9508),
                            ReplyData = "Azure",
                            SurveyQuestionId = -1
                        });
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.StepContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SurveyStepId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyStepId")
                        .IsUnique();

                    b.ToTable("StepContent");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(5299),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(5312),
                            SurveyStepId = -1,
                            Title = "Databerry Migration Process:"
                        });
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanySite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfQuestionnaire")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Version")
                        .IsUnique();

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CompanyName = "Databerry",
                            CompanySite = "www.databerry.com",
                            ContactPhone = "855-350-0707",
                            ContactTitle = "Phone",
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 241, DateTimeKind.Local).AddTicks(1790),
                            DateOfQuestionnaire = new DateTime(2020, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 244, DateTimeKind.Local).AddTicks(5221),
                            Title = "Infrastructure Migration Survey Form V8",
                            Version = 8
                        });
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.SurveyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentSurveyQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Quesiton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SurveyQuestionsID")
                        .HasColumnType("int");

                    b.Property<int>("SurveyStepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentSurveyQuestionId");

                    b.HasIndex("SurveyStepId");

                    b.ToTable("SurveyQuestion");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(9464),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(9477),
                            Note = "(e.g. Amazon AWS, Azure, On-Premise)",
                            Order = 0,
                            Quesiton = "Current Hosting Service Provider?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -2,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2309),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2321),
                            Note = "",
                            Order = 2,
                            Quesiton = "Total count of Server(s)?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -3,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2327),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2329),
                            Note = "",
                            Order = 3,
                            Quesiton = "Is there a SAN? (Yes or No)",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -4,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2332),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2335),
                            Note = "",
                            Order = 5,
                            Quesiton = "Total Count of Database(s)?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -5,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2338),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2340),
                            Note = "(e.g. .NET 4.5 | PHP 5.4 | Java 1.5)",
                            Order = 6,
                            Quesiton = "Custom Applications, Applications, Frameworks, | Versions? Please list all Applications types/versions &amp; Names ?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -6,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2344),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2347),
                            Note = "(e.g. Joomla 2.x, Drupal 7.2, WordPress 4.1, QuickBooks v18.0 etc.)",
                            Order = 6,
                            Quesiton = "Are there any Third-party commercial applications or platforms | API’s | Plug-ins?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -7,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2349),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2352),
                            Note = "(Note: VPN will be required if migrating over WAN)",
                            Order = 7,
                            Quesiton = "Active Directory Migration (Yes or No)?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -8,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2355),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2357),
                            Note = "(e.g. iOS Apple swift, Android java, Windows Mobile)",
                            Order = 8,
                            Quesiton = "Are there any Mobile Apps?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -9,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2360),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2363),
                            Note = "(e.g. Authorize.net, PayPal, Stripe, Magento etc.)",
                            Order = 9,
                            Quesiton = "Are there any E-commerce or Payment Gateways Service/platforms involved?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -10,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2366),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2368),
                            Order = 11,
                            Quesiton = "Total SSL Certificate(s)?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -11,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2371),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2373),
                            Note = "(e.g. Webmin v1.89, Plesk v12.5, CPanel v58, Docker v17.x)",
                            Order = 12,
                            Quesiton = "Is there any Server Control Panels installed?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -12,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2377),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2379),
                            Note = "(e.g. IIS 7.0, Apache 2.2, Nginx 1.1)",
                            Order = 14,
                            Quesiton = "List existing Web Server platform &amp; Versions?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -13,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2382),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2384),
                            Note = "(e.g. Sendmail v8.7, PHPmailer, Postfix, MS Exchange v2013, Exim)",
                            Order = 14,
                            Quesiton = "Are there any E-mail platforms or services installed on the Server(s) Type | Version?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -14,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2387),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2390),
                            Note = "(e.g. Google analytics data and/or Environment estimated usage of High, Medium, Low)",
                            Order = 15,
                            Quesiton = "Total Monthly estimated average of Usage Traffic and/or Transactions volume?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -35,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2394),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2396),
                            Note = "(e.g. Amazon AWS, Azure, On-Premise)",
                            Order = 0,
                            Quesiton = "Moving to Hosting Service Provider?",
                            ReplyType = "Text",
                            SurveyStepId = -3
                        },
                        new
                        {
                            Id = -36,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2399),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2401),
                            Order = 2,
                            Quesiton = "Is there a SAN? (Yes or No)",
                            ReplyType = "Text",
                            SurveyStepId = -3
                        },
                        new
                        {
                            Id = -37,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2404),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2406),
                            Note = "(e.g. P= Physical V=Virtual P-P, P-V, V-V, V-P)",
                            Order = 3,
                            Quesiton = "Specify the Type of Migration?",
                            ReplyType = "Text",
                            SurveyStepId = -3
                        },
                        new
                        {
                            Id = -38,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2409),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2412),
                            Order = 4,
                            Quesiton = "Please include any additional technical details that you may feel is important that was not covered above:",
                            ReplyType = "TextArea",
                            SurveyStepId = -3
                        },
                        new
                        {
                            Id = -39,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2415),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2417),
                            Order = 1,
                            Quesiton = "Specify the number of Source Server(s) to be migrated, Type, OS, Storage, State?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -40,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2420),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2422),
                            Note = "(e.g. Microsoft SQL 2014, MariaDB 5.6, MySQL 5.4, Name of DB, size of DB, MB’s, GB’s, TB’s)",
                            Order = 4,
                            Quesiton = "Specify the Database Engine Server(s) Type | Version | Name | Size | Quantity?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -41,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2425),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2427),
                            Note = "(if Yes please List)",
                            Order = 10,
                            Quesiton = "Are there any SSL certificate(s) installed (Type &amp; Location If possible)?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -42,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2430),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2433),
                            Order = 13,
                            Quesiton = "List the number of Website Names (&amp; Location on Servers if possible)?",
                            ReplyType = "Text",
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -43,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2435),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2438),
                            Order = 1,
                            Quesiton = "Specify the number of Source Server(s) to be migrated, Type, OS, Storage, State?",
                            ReplyType = "Text",
                            SurveyStepId = -3
                        },
                        new
                        {
                            Id = -15,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2440),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(2443),
                            Order = 0,
                            Quesiton = "Name of Server",
                            ReplyType = "Text",
                            SurveyQuestionsID = -39,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -16,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3229),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3242),
                            Order = 1,
                            Quesiton = "Describe the Type of Server",
                            ReplyType = "Text",
                            SurveyQuestionsID = -39,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -17,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3248),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3250),
                            Order = 2,
                            Quesiton = "OS Type & Version",
                            ReplyType = "Text",
                            SurveyQuestionsID = -39,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -18,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3254),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3257),
                            Order = 3,
                            Quesiton = "Total Storage of Server in (GB'S TB'S) & amp; Partitions",
                            ReplyType = "Text",
                            SurveyQuestionsID = -39,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -19,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3260),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3263),
                            Order = 4,
                            Quesiton = "State of Server (Physical, Virtual, Hyper-Visor)",
                            ReplyType = "Text",
                            SurveyQuestionsID = -39,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -20,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3266),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3269),
                            Order = 0,
                            Quesiton = "DB Server Name",
                            ReplyType = "Text",
                            SurveyQuestionsID = -40,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -21,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3272),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3275),
                            Order = 1,
                            Quesiton = "DB Engine Type &amp; Version",
                            ReplyType = "Text",
                            SurveyQuestionsID = -40,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -22,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3278),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3281),
                            Order = 2,
                            Quesiton = "DB Name",
                            ReplyType = "Text",
                            SurveyQuestionsID = -40,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -23,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3285),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3287),
                            Order = 3,
                            Quesiton = "DB Location",
                            ReplyType = "Text",
                            SurveyQuestionsID = -40,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -24,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3291),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3294),
                            Order = 4,
                            Quesiton = "Total DB Size in (MB's GB'S TB'S)",
                            ReplyType = "Text",
                            SurveyQuestionsID = -40,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -25,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3297),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3300),
                            Order = 0,
                            Quesiton = "SSL Name",
                            ReplyType = "Text",
                            SurveyQuestionsID = -41,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -26,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3303),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3306),
                            Order = 1,
                            Quesiton = "SSL Type",
                            ReplyType = "Text",
                            SurveyQuestionsID = -41,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -27,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3309),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3312),
                            Order = 2,
                            Quesiton = "SSL Location (Server Name/Location)",
                            ReplyType = "Text",
                            SurveyQuestionsID = -41,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -28,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3315),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3318),
                            Order = 0,
                            Quesiton = "Website Name",
                            ReplyType = "Text",
                            SurveyQuestionsID = -42,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -29,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3321),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3324),
                            Order = 1,
                            Quesiton = "Website Location (Server Name/Location)",
                            ReplyType = "Text",
                            SurveyQuestionsID = -42,
                            SurveyStepId = -2
                        },
                        new
                        {
                            Id = -30,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3328),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3330),
                            Order = 0,
                            Quesiton = "Name of Server",
                            ReplyType = "Text",
                            SurveyQuestionsID = -43,
                            SurveyStepId = -3
                        },
                        new
                        {
                            Id = -31,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3334),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3336),
                            Order = 1,
                            Quesiton = "Describe the Type of Server",
                            ReplyType = "Text",
                            SurveyQuestionsID = -43,
                            SurveyStepId = -3
                        },
                        new
                        {
                            Id = -32,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3340),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3343),
                            Order = 2,
                            Quesiton = "OS Type & Version",
                            ReplyType = "Text",
                            SurveyQuestionsID = -43,
                            SurveyStepId = -3
                        },
                        new
                        {
                            Id = -33,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3346),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3349),
                            Order = 3,
                            Quesiton = "Total Storage of Server in (GB'S TB'S) & amp; Partitions",
                            ReplyType = "Text",
                            SurveyQuestionsID = -43,
                            SurveyStepId = -3
                        },
                        new
                        {
                            Id = -34,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3352),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 248, DateTimeKind.Local).AddTicks(3355),
                            Order = 4,
                            Quesiton = "State of Server (Physical, Virtual, Hyper-Visor)",
                            ReplyType = "Text",
                            SurveyQuestionsID = -43,
                            SurveyStepId = -3
                        });
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.SurveyStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyVersion")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId", "SurveyVersion");

                    b.ToTable("SurveyStep");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(1923),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(1937),
                            Order = 0,
                            SurveyId = -1,
                            SurveyVersion = 8,
                            Title = "Organization/Company &amp; Primary Contact Details: Step A"
                        },
                        new
                        {
                            Id = -2,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(4137),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(4151),
                            Order = 1,
                            SurveyId = -1,
                            SurveyVersion = 8,
                            Title = "Source Migration Infrastructure Details: Step B"
                        },
                        new
                        {
                            Id = -3,
                            CreatedBy = "Anonymous",
                            CreatedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(4156),
                            IsActive = true,
                            ModifiedBy = "Anonymous",
                            ModifiedDate = new DateTime(2020, 6, 17, 20, 15, 58, 247, DateTimeKind.Local).AddTicks(4159),
                            Order = 2,
                            SurveyId = -1,
                            SurveyVersion = 8,
                            Title = "Destination Migration Infrastructure Details: Step C"
                        });
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.ClientSurveys", b =>
                {
                    b.HasOne("Company.Survey.Core.Data.Entities.Client", "Client")
                        .WithMany("ClientSurveys")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Survey.Core.Data.Entities.Survey", "Survey")
                        .WithMany("ClientSurveys")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.Content", b =>
                {
                    b.HasOne("Company.Survey.Core.Data.Entities.StepContent", "StepContent")
                        .WithMany("ContentBlocks")
                        .HasForeignKey("StepContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.Reply", b =>
                {
                    b.HasOne("Company.Survey.Core.Data.Entities.ClientSurveys", "ClientSurvey")
                        .WithMany("ClientQuestionReplies")
                        .HasForeignKey("ClientSurveyId");

                    b.HasOne("Company.Survey.Core.Data.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany("PossibleReplies")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.StepContent", b =>
                {
                    b.HasOne("Company.Survey.Core.Data.Entities.SurveyStep", "SurveyStep")
                        .WithOne("StepContent")
                        .HasForeignKey("Company.Survey.Core.Data.Entities.StepContent", "SurveyStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("Company.Survey.Core.Data.Entities.SurveyQuestion", "ParentSurveyQuestion")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("ParentSurveyQuestionId");

                    b.HasOne("Company.Survey.Core.Data.Entities.SurveyStep", "SurveyStep")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Survey.Core.Data.Entities.SurveyStep", b =>
                {
                    b.HasOne("Company.Survey.Core.Data.Entities.Survey", "Survey")
                        .WithMany("SurveySteps")
                        .HasForeignKey("SurveyId", "SurveyVersion")
                        .HasPrincipalKey("Id", "Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
