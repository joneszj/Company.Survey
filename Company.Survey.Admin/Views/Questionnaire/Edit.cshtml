@model Company.Survey.Core.Data.Entities.Survey

@{
    Layout = "_Layout";
    ViewData["Title"] = "Edit Questionnaire";
}

<h1>Edit Questionnaire</h1>
<h2>Title: <span id="@Model.Id">@Model.Title</span> (@Model.Version)</h2>
<div class="row">
    Updates are made in real time and applied to all matching client distributed surveys of this version (Clients with this version: @ViewBag.ClientSurveyCount). To create an identical survey that will update separate from currently distributed client surveys, create a new verion.
</div>
<br />
<div class="row">
    <div class="col">
        <button class="btn btn-success">
            Preview Questionnaire
        </button>
        <button class="btn btn-primary"
                onclick="location.href='@Url.Action("NewVersion", "Questionnaire", new { id = Model.Id, key = Model.SurveyKey })'">
            Create New Version
        </button>
        <button class="btn btn-danger"
                onclick="location.href='@Url.Action("DisableSurvey", "Questionnaire", new { id = Model.Id })'">
            Disable Survey Version
        </button>
    </div>
</div>
<br />
<div class="row">
    <div class="col">
        <button class="btn btn-primary" data-toggle="modal" data-target="#addStepModal">
            Add Step to Survey
        </button>
    </div>
</div>
<br />
<div class="row">
    <div class="col">
        @foreach (var step in Model.SurveySteps)
        {
            <div class="row bg-secondary text-white pt-2">
                <div class="col form-group">
                    <label>Step Position @step.Order</label>
                    <input class="form-control pt-2"
                           id="@step.Id"
                           value="@step.Title"
                           data-order="@step.Order"
                           onblur="updateStep()" />
                </div>
            </div>
            <div class="row bg-secondary text-white pb-2">
                <div class="col">
                    <button class="btn btn-primary" data-toggle="modal" data-target="#addQuestionModal">
                        Add Question
                    </button>
                    @if (step.StepContent == null)
                    {
                        <button class="btn btn-primary" onclick="addContentSection()">
                            Add Content Section
                        </button>
                    }
                    <button class="btn btn-warning" onclick="removeStepConfirm()">
                        Remove Step
                    </button>
                </div>
            </div>
            @if (step.StepContent != null)
            {
                <div class="row p-2">
                    <div class="p-2">
                        <button class="btn btn-primary" data-toggle="modal" data-target="#addContentBlockModal">
                            Add Block
                        </button>
                    </div>
                    <div class="p-2">
                        <button class="btn btn-warning" onclick="removeStepContentConfirm()">
                            Remove Content Section
                        </button>
                    </div>
                </div>
                @foreach (var block in step.StepContent.ContentBlocks)
                {
                    <div class="row bg-light" id="@block.Id">
                        <div class="col">
                            <input class="form-control pt-2"
                                   id="@block.Id"
                                   value="@block.ContentData"
                                   onblur="updateStepContent()" />
                            <button class="btn btn-warning m-2" onclick="removeContentBlock()">
                                Remove Block
                            </button>
                        </div>
                    </div>
                }
            }
            <div class="row bg-light">
                <div class="col">
                    @foreach (var question in step.Questions)
                    {
                        @if (question.ParentSurveyQuestion == null)
                        {
                            <hr />
                            <div class="row p-2">
                                <div class="col" id="@question.Id">
                                    <label>Question Position @(++question.Order)</label>
                                    <input class="form-control pt-2"
                                           id="@question.Id"
                                           value="@question.Quesiton"
                                           data-order="@question.Order"
                                           onblur="updateQuestion()" />
                                    <button class="btn btn-primary m-2" data-toggle="modal" data-target="#addQuestionModal">
                                        Add Sub-Question
                                    </button>
                                    <button class="btn btn-warning m-2" onclick="removeQuestion()">
                                        Remove
                                    </button>
                                </div>
                            </div>
                        }
                        @if (question.ParentSurveyQuestion != null)
                        {
                            <div class="col border" id="@question.Id">
                                <label>Sub-Position @(++question.Order)</label>
                                <input class="form-control pt-2"
                                       id="@question.Id"
                                       value="@question.Quesiton"
                                       data-order="@question.Order"
                                       data-parent="@question.ParentSurveyQuestionId"
                                       onblur="updateQuestion()" />
                                <button class="btn btn-warning m-2" onclick="removeQuestion()">
                                    Remove Sub-Question
                                </button>
                            </div>
                        }
                    }
                </div>
            </div>
            <hr />
        }
    </div>
</div>

@await Html.PartialAsync("_AddStep")
@await Html.PartialAsync("_AddQuestion")
@await Html.PartialAsync("_AddContentBlock")

<script>
    // update listeners
    function updateStep() {
        fetch(`${window.location.origin}/questionnaire/UpdateQuestionnaireStep`, {
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            credentials: "same-origin",
            body: JSON.stringify({
                Id: Number(event.target.id),
                Order: Number(event.target.dataset.order),
                Title: event.target.value
            })
        }).then(e => console.assert(e.ok, "TODO: add success/failure indication"));
    }

    function updateStepContent() {

    }

    function updateQuestion() {

    }

    function addContentSection() {

    }

    // remove event listeners
    function removeStepConfirm() {
        if (confirm("Removing the step will remove all questions in the step. Continue?")) {

        }
    }

    function removeStepContentConfirm() {
        if (confirm("Removing the step content will remove all content blocks in the step. Continue?")) {

        }
    }

    function removeContentBlock() {
        if (confirm("Are you sure?")) {

        }
    }

    function removeQuestion() {
        if (confirm("Are you sure?")) {

        }
    }
</script>